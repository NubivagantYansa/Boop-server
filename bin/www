#!/usr/bin/env node

const {
  addUser,
  removeUser,
  getUser,
  getUsersInRoom,
} = require("../utils/users");

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("basic-api:server");
const http = require("http");
const socket = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Wrap server in socket.io .
 */

const io = socket(server, {
  transports: ["websocket", "polling"],
});

io.on("connect", (socket) => {
  socket.on("join", ({ name, room }, callback) => {
    console.log("connected");
    //Add user to room - it either returns an arroro or the user
    const { error, user } = addUser({ id: socket.id, name, room });
    console.log("user", user);

    if (error) return callback();
    // join user in a room

    socket.join(user.room);
    // ADMIN MESSAGE - welcome message in room : emit event from backend to frontend
    socket.emit("message", {
      user: "admin",
      text: `${user.name}, welcome to room ${user.room}.`,
    });
    // ADMIN MESSAGE -  send a mess to everyone in the chat
    socket.broadcast
      .to(user.room)
      .emit("message", { user: "admin", text: `${user.name} has joined!` });

    io.to(user.room).emit("roomData", {
      room: user.room,
      users: getUsersInRoom(user.room),
    });

    callback();
  });
  //  USER MESSAGE -  sends message: expect event from front-end
  socket.on("sendMessage", (message, callback) => {
    const user = getUser(socket.id);
    // send to - emit message body
    io.to(user.room).emit("message", { user: user.name, text: message });

    callback();
  });

  socket.on("disconnect", () => {
    console.log("disconn");
    const user = removeUser(socket.id);

    if (user) {
      io.to(user.room).emit("message", {
        user: "Admin",
        text: `${user.name} has left.`,
      });
      io.to(user.room).emit("roomData", {
        room: user.room,
        users: getUsersInRoom(user.room),
      });
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
